// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RaidBot.Data;

#nullable disable

namespace RaidBot.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230402070536_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DSharpPlus.Entities.DiscordMember", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("AvatarHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BannerHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("CommunicationDisabledUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Flags")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBot")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeafened")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsPending")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSystem")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("MfaEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OAuthFlags")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("PremiumSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PremiumType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DiscordMember");
                });

            modelBuilder.Entity("DSharpPlus.Entities.DiscordRole", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordMemberId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsHoisted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsManaged")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMentionable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Permissions")
                        .HasColumnType("bigint");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMemberId");

                    b.ToTable("DiscordRole");
                });

            modelBuilder.Entity("RaidBot.entities.ActiveRaids", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("id");

                    b.HasIndex("GuildId");

                    b.ToTable("ActiveRaids");
                });

            modelBuilder.Entity("RaidBot.entities.AssignedTierRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedTierRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<int?>("TierRoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTierRoleId");

                    b.HasIndex("TierRoleId");

                    b.ToTable("AssignedTierRoles");
                });

            modelBuilder.Entity("RaidBot.entities.GuildMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("DiscordMemberId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DiscordMemberId");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildMember");
                });

            modelBuilder.Entity("RaidBot.entities.GuildSettings", b =>
                {
                    b.Property<decimal>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("RaidChannelGroup")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("RaidChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("GuildSettings");
                });

            modelBuilder.Entity("RaidBot.entities.RaidSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActiveRaidsid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<int>("RaidId")
                        .HasColumnType("integer");

                    b.Property<string>("RaidName")
                        .HasColumnType("text");

                    b.Property<string>("TierRole")
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ActiveRaidsid");

                    b.HasIndex("RaidId");

                    b.ToTable("RaidSettings");
                });

            modelBuilder.Entity("RaidBot.entities.RaidStatsByRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("RaidHistoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<int?>("UserRaidHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RaidHistoryId");

                    b.HasIndex("UserRaidHistoryId");

                    b.ToTable("RaidStatsByRoles");
                });

            modelBuilder.Entity("RaidBot.entities.RaidStatsByTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RaidHistoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TierCount")
                        .HasColumnType("integer");

                    b.Property<string>("TierName")
                        .HasColumnType("text");

                    b.Property<int?>("UserRaidHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RaidHistoryId");

                    b.HasIndex("UserRaidHistoryId");

                    b.ToTable("RaidStatsByTiers");
                });

            modelBuilder.Entity("RaidBot.entities.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Dps")
                        .HasColumnType("text");

                    b.Property<string>("Healer")
                        .HasColumnType("text");

                    b.Property<int>("RaidSettingsId")
                        .HasColumnType("integer");

                    b.Property<string>("Tank")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RaidSettingsId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RaidBot.entities.SignUpEmoji", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("AssignedRole")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RaidSettingsId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RaidSettingsId");

                    b.ToTable("SignUpEmojis");
                });

            modelBuilder.Entity("RaidBot.entities.TierRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("TierName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("TierRoles");
                });

            modelBuilder.Entity("RaidBot.entities.UserRaidHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuildMemberId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastRaidDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalRaidCount")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRaidCountLastMonth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildMemberId");

                    b.ToTable("UserRaidHistories");
                });

            modelBuilder.Entity("DSharpPlus.Entities.DiscordRole", b =>
                {
                    b.HasOne("DSharpPlus.Entities.DiscordMember", null)
                        .WithMany("Roles")
                        .HasForeignKey("DiscordMemberId");
                });

            modelBuilder.Entity("RaidBot.entities.ActiveRaids", b =>
                {
                    b.HasOne("RaidBot.entities.GuildSettings", "GuildSettings")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildSettings");
                });

            modelBuilder.Entity("RaidBot.entities.AssignedTierRoles", b =>
                {
                    b.HasOne("RaidBot.entities.TierRole", "TierRole")
                        .WithMany()
                        .HasForeignKey("AssignedTierRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaidBot.entities.TierRole", null)
                        .WithMany("Roles")
                        .HasForeignKey("TierRoleId");

                    b.Navigation("TierRole");
                });

            modelBuilder.Entity("RaidBot.entities.GuildMember", b =>
                {
                    b.HasOne("DSharpPlus.Entities.DiscordMember", "DiscordMember")
                        .WithMany()
                        .HasForeignKey("DiscordMemberId");

                    b.HasOne("RaidBot.entities.GuildSettings", "GuildSettings")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscordMember");

                    b.Navigation("GuildSettings");
                });

            modelBuilder.Entity("RaidBot.entities.RaidSettings", b =>
                {
                    b.HasOne("RaidBot.entities.ActiveRaids", null)
                        .WithMany("ActiveRaidsList")
                        .HasForeignKey("ActiveRaidsid");

                    b.HasOne("RaidBot.entities.ActiveRaids", "ActiveRaids")
                        .WithMany()
                        .HasForeignKey("RaidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveRaids");
                });

            modelBuilder.Entity("RaidBot.entities.RaidStatsByRole", b =>
                {
                    b.HasOne("RaidBot.entities.UserRaidHistory", "UserRaidHistory")
                        .WithMany()
                        .HasForeignKey("RaidHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaidBot.entities.UserRaidHistory", null)
                        .WithMany("RaidStatsByRole")
                        .HasForeignKey("UserRaidHistoryId");

                    b.Navigation("UserRaidHistory");
                });

            modelBuilder.Entity("RaidBot.entities.RaidStatsByTier", b =>
                {
                    b.HasOne("RaidBot.entities.UserRaidHistory", "UserRaidHistory")
                        .WithMany()
                        .HasForeignKey("RaidHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RaidBot.entities.UserRaidHistory", null)
                        .WithMany("RaidStatsByTier")
                        .HasForeignKey("UserRaidHistoryId");

                    b.Navigation("UserRaidHistory");
                });

            modelBuilder.Entity("RaidBot.entities.Roles", b =>
                {
                    b.HasOne("RaidBot.entities.RaidSettings", "RaidSettings")
                        .WithMany()
                        .HasForeignKey("RaidSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaidSettings");
                });

            modelBuilder.Entity("RaidBot.entities.SignUpEmoji", b =>
                {
                    b.HasOne("RaidBot.entities.RaidSettings", "RaidSettings")
                        .WithMany()
                        .HasForeignKey("RaidSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RaidSettings");
                });

            modelBuilder.Entity("RaidBot.entities.TierRole", b =>
                {
                    b.HasOne("RaidBot.entities.GuildSettings", "GuildSettings")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildSettings");
                });

            modelBuilder.Entity("RaidBot.entities.UserRaidHistory", b =>
                {
                    b.HasOne("RaidBot.entities.GuildMember", "GuildMember")
                        .WithMany()
                        .HasForeignKey("GuildMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GuildMember");
                });

            modelBuilder.Entity("DSharpPlus.Entities.DiscordMember", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("RaidBot.entities.ActiveRaids", b =>
                {
                    b.Navigation("ActiveRaidsList");
                });

            modelBuilder.Entity("RaidBot.entities.TierRole", b =>
                {
                    b.Navigation("Roles");
                });

            modelBuilder.Entity("RaidBot.entities.UserRaidHistory", b =>
                {
                    b.Navigation("RaidStatsByRole");

                    b.Navigation("RaidStatsByTier");
                });
#pragma warning restore 612, 618
        }
    }
}
